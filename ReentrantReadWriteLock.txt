ReadLock
// 假设代码执行的是这个：fair=false

public ReentrantReadWriteLock(boolean fair) {
	sync = fair ? new FairSync() : new NonfairSync();
	readerLock = new ReadLock(this);
	writerLock = new WriteLock(this);
}

// 读锁是共享模式，共享模式就是多个线程可以对一个资源进行读操作
public void lock() {
	sync.acquireShared(1);
}

// 获取到共享模式的锁。
public final void acquireShared(int arg) {
	if (tryAcquireShared(arg) < 0)
		doAcquireShared(arg);
}
(1)tryAcquireShared的作用是当前线程获取读锁，当返回1时，表示获取成功，-1表示获取失败。
(2)doAcquireShared，表示获取失败的时候调用。将获取失败的线程加入到等待队列中。

//-------tryAcquireShared--------
protected final int tryAcquireShared(int unused) {

	Thread current = Thread.currentThread();
	// 获取到占有锁的线程数
	int c = getState();
	// 如果写锁被占领了且不是当前线程占领，那么直接返回 -1
	if (exclusiveCount(c) != 0 &&
		getExclusiveOwnerThread() != current)
		return -1;
	int r = sharedCount(c); // 占有共享锁的线程数
	if (!readerShouldBlock() && // 如果队列的头节点的next节点是独享锁即写锁，返回true
		r < MAX_COUNT && 	// 共享的数据不能超过65535
		compareAndSetState(c, c + SHARED_UNIT)) {  // cas设置state
		if (r == 0) {   // 线程来拿读锁，读锁和写锁没有被任何线程拥有，那么r==0
			firstReader = current; // 
			firstReaderHoldCount = 1;
		} else if (firstReader == current) { // 如果线程重复获取读锁，那么从这里开始重入
			firstReaderHoldCount++;
		} else { // 如果读锁被线程x占领，线程y也要来申请读锁，那么分支就走到这里了

		// HoldCounter类中存储了两个属性，一个是count,用于记录线程的重入次数，一个是tid，记录当前线程的id
			HoldCounter rh = cachedHoldCounter;
			
			// 线程x拥有读锁之后，线程y第一次申请的时候会走到这里
			//cachedHoldCounter 是一个缓存，保存当前操作线程的上一个线程的操作结果。线程y操作完之后，就会保存线程y的信息
			// 如果另外一个线程z来获取到读锁的时候，虽然rh！=null，但是rh.tid != getThreadId(current),
			//那么会创建一个默认的HoldCounter，并保存到cachedHoldCounter,并且默认的count=0
			if (rh == null || rh.tid != getThreadId(current))
			// readHolds.get(),查看源码可以知道，在这个方法中包含了数据初始化的过程，会调用ReentrantReadWriteLock.java
			// 下面的方法
			/**
			* public HoldCounter initialValue() {
               *             return new HoldCounter();
                 *       }
                 */
				cachedHoldCounter = rh = readHolds.get(); 
			else if (rh.count == 0) // 这个分支也会来到，当线程释放锁，但是没有关闭，当再次调用线程时，readHolds中会存在HoldCounter，count=0
				readHolds.set(rh);
			rh.count++; // 计算重入的次数
		}
		return 1;
	}
	return fullTryAcquireShared(current);
}

// ReentrantReadWriterLock使用一个32位的int类型来表示锁被占用的线程数（ReentrantLock中的state）,
//采取的办法是，高16位用来表示读锁占有的线程数量，用低16位表示写锁被同一个线程申请的次数。
// 使用HoldCounter对象中的count来表示线程的重入数

// 把c的值与11111111 11111111 按位与，这样其实就是取到了写锁的线程数;
// 这个就是获取低16位的数
  static int exclusiveCount(int c) { return c & EXCLUSIVE_MASK; }
  
  // 把c的值向右移16为，并且高位补0； >>> 无符号右移,高位补0
  // 这个就是获取高16位的数
static int sharedCount(int c)    { return c >>> SHARED_SHIFT; }

// 读锁应该被阻塞
final boolean readerShouldBlock() {
	return apparentlyFirstQueuedIsExclusive();
}

/**
 * Returns {@code true} if the apparent first queued thread, if one
 * exists, is waiting in exclusive mode.  If this method returns
 * {@code true}, and the current thread is attempting to acquire in
 * shared mode (that is, this method is invoked from {@link
 * #tryAcquireShared}) then it is guaranteed that the current thread
 * is not the first queued thread.  Used only as a heuristic in
 * ReentrantReadWriteLock.
 *如果第一个入队列的线程节点存在，并且工作在独享模式下，那么返回true;
 *如果这个方法返回true,并且当前线程以共享的模式获取锁，这个方法保证了它不是第一个入队列的
 *（读锁与读锁都时共存的，所以不会入队，只有当队列中有独享模式的线程节点的时候，获取共享模式的线程才会加入到队列中。）
 */
final boolean apparentlyFirstQueuedIsExclusive() {
	Node h, s;
	// 头节点存在，并且存在下一个节点，下一个节点是独享模式，下一个节点的thread不是空，则返回true
	return (h = head) != null &&
		(s = h.next)  != null &&
		!s.isShared()         &&
		s.thread != null;
}

//--------------fullTryAcquireShared----------

// 进入这个方法的条件，
/**条件1：!readerShouldBlock() && // 如果第一个入队列的线程节点存在，并且工作在独享模式下，那么返回true;
	*	条件2：r < MAX_COUNT && 	// 共享的数据不能超过65535,竞争读锁的线程数已经超过了65535
	*	条件3：compareAndSetState(c, c + SHARED_UNIT) // 两个竞争读锁的线程都运行到这里，第一个竞争成功，那么第二个就会竞争失败，返回false
    *  其实这个方法分别对这三种状态进行处理
   */
   /**
         * Full version of acquire for reads, that handles CAS misses
         * and reentrant reads not dealt with in tryAcquireShared.
         */
        final int fullTryAcquireShared(Thread current) {
            /*
             * This code is in part redundant with that in
             * tryAcquireShared but is simpler overall by not
             * complicating tryAcquireShared with interactions between
             * retries and lazily reading hold counts.
             */
            HoldCounter rh = null;
            for (;;) {
                int c = getState();
                // 如果排他锁被别的线程拿了，直接返回-1
                if (exclusiveCount(c) != 0) {
                    if (getExclusiveOwnerThread() != current)
                        return -1;
                    // else we hold the exclusive lock; blocking here
                    // would cause deadlock.
                } else if (readerShouldBlock()) {  // 这里是对条件1的处理
                // 如果队列的头的下一个节点是请求的排他锁的线程在等待，那么就返回true
                    // Make sure we're not acquiring read lock reentrantly
                    if (firstReader == current) {
                        // assert firstReaderHoldCount > 0;
                    } else {
                        if (rh == null) {
                            rh = cachedHoldCounter;
                            if (rh == null || rh.tid != getThreadId(current)) {
                                rh = readHolds.get();
                                // 如果当前线程的count==0，也就是说当前线程才进来，没有获取到锁，那么直接把它从readHolds中移除
                                if (rh.count == 0)
                                // 移除当前线程的HoldCounter
                                    readHolds.remove();
                            }
                        }
                        // 移除之后，返回-1
                        if (rh.count == 0)
                            return -1;
                    }
                }
                // 这里是对条件2的处理，直接抛出错误！
                if (sharedCount(c) == MAX_COUNT)
                    throw new Error("Maximum lock count exceeded");
                    // 这里是对条件3的处理，竞争设置state，如果竞争还是失败，那么就要再循环一次，直到死循环能够跳出去
                if (compareAndSetState(c, c + SHARED_UNIT)) {
                // 如果共享锁的数量为0
                    if (sharedCount(c) == 0) {
                    // 设置线程为当前的线程
                        firstReader = current;
                        // 设置HoldCount =1
                        firstReaderHoldCount = 1;
                    } else if (firstReader == current) {
                        firstReaderHoldCount++;
                    } else {
                        if (rh == null)
                            rh = cachedHoldCounter;
                        if (rh == null || rh.tid != getThreadId(current))
                            rh = readHolds.get();
                        else if (rh.count == 0)
                            readHolds.set(rh);
                        rh.count++;
                        cachedHoldCounter = rh; // cache for release
                    }
                    return 1;
                }
            }
        }

        // --------------fullTryAcquireShared----------
        // --------------doAcquireShared----------
        /**
             * Acquires in shared uninterruptible mode.
             * @param arg the acquire argument
             */
             // 如果tryAcquireShared(arg) < 0，则来到这个方法。tryAcquireShared(arg) < 0条件成立的条件
             // 1、tryAcquireShared 方法中，当有线程来申请共享锁的时候发现写锁已经被占领了，那么直接返回-1
             // 2、fullTryAcquireShared 方法中，当有线程来申请共享锁的时候发现写锁已经被占领了，那么直接返回-1
             // 3、fullTryAcquireShared 方法中，在获取锁的队列中，排在最前面的获取锁的线程时独享模式，那么从readHolds中移除读锁的HoldCounter属性，然后返回-1
             // 总结：如果写锁被占领了，那么返回-1，如果在队列排在第一位的是独享锁（理想情况下，如果线程操作没有异常的话，独享锁肯定是排在第一位的，
             // 因为如果没独享模式的线程的话，全部是共享模式的线程，则tryAcquireShared(arg) >0，那么不会往队列中排，所有的共享模式的线程都会添加到ThreadLocalHoldCounter那个变量中）
            // 也就是说如果有独享模式的线程申请锁，就会往Head后面添加，组成队列的形式，加完第一个之后，如果有共享模式的线程来申请锁，也会往这个队列后面添加
            // 然后阻塞住，挂起。

            //情况1： 如果没有独享模式的线程来请求锁，只有共享模式的线程来请求锁，队列为空

            // 情况2：当有一个独享模式的线程(node1)来请求锁，并且共享模式的线程占领锁（读锁），那么队列的组成如图
            // <--head--><--node1-->

            // 情况3：在情况2的情况下，又有两个共享模式的线程（node2）来竞争锁，那么就要往后排队了，队列的组成图
            // <--head--><--node1--><--node2--><--node3-->

            // 只要node1存在就会一直往后加，如果node1不存在，且exclusiveCount(c) != 0，独享锁被占领，那么新添加的线程都会往这个队列中添加
            private void doAcquireShared(int arg) {
            // 把共享模式的线程加入到队列中
                final Node node = addWaiter(Node.SHARED);
                boolean failed = true;
                try {
                    boolean interrupted = false;
                    for (;;) {
                        final Node p = node.predecessor();
                        // 如果前置节点是头节点，那么就要tryAcquireShared(arg)
                        if (p == head) {
                            int r = tryAcquireShared(arg);
                            // r>0说明获取到共享模式的锁
                            if (r >= 0) {
                            // 把当前的节点设置为头节点，并且把下一个共享模式的锁释放
                            // 释放完了之后，如果之后的节点还是共享模式，那么就要一直释放下去。
                                setHeadAndPropagate(node, r);
                                p.next = null; // help GC
                                if (interrupted)
                                    selfInterrupt();
                                failed = false;
                                return;
                            }
                        }
                        // 如果当前节点的前置节点不是头节点head，也就是说前面还有其他的节点在等待获取到线程
                        // 那么来到这里，这里的分析跟ReentrantLock是一样的
                        if (shouldParkAfterFailedAcquire(p, node) &&
                            parkAndCheckInterrupt())
                            interrupted = true;
                    }
                } finally {
                    if (failed)
                        cancelAcquire(node);
                }
            }

            // ----------------setHeadAndPropagate------------------
              /**
                 * Sets head of queue, and checks if successor may be waiting
                 * in shared mode, if so propagating if either propagate > 0 or
                 * PROPAGATE status was set.
                 *
                 * @param node the node
                 * @param propagate the return value from a tryAcquireShared
                 */
                private void setHeadAndPropagate(Node node, int propagate) {
                    Node h = head; // Record old head for check below
                    setHead(node);
                    /*
                     * Try to signal next queued node if:
                     *   Propagation was indicated by caller,
                     *     or was recorded (as h.waitStatus either before
                     *     or after setHead) by a previous operation
                     *     (note: this uses sign-check of waitStatus because
                     *      PROPAGATE status may transition to SIGNAL.)
                     * and
                     *   The next node is waiting in shared mode,
                     *     or we don't know, because it appears null
                     *
                     * The conservatism in both of these checks may cause
                     * unnecessary wake-ups, but only when there are multiple
                     * racing acquires/releases, so most need signals now or soon
                     * anyway.
                     */
                    if (propagate > 0 || h == null || h.waitStatus < 0 ||
                        (h = head) == null || h.waitStatus < 0) {
                        Node s = node.next;
                        if (s == null || s.isShared())
                        // 如果共享锁的下一个节点也是共享模式的节点，那么通知释放下一个节点
                            doReleaseShared();
                    }
                }
// -----------------------------------

//-------------------doReleaseShared-----------------

    /**
     * Release action for shared mode -- signals successor and ensures
     * propagation. (Note: For exclusive mode, release just amounts
     * to calling unparkSuccessor of head if it needs signal.)
     */
    private void doReleaseShared() {
        /*
         * Ensure that a release propagates, even if there are other
         * in-progress acquires/releases.  This proceeds in the usual
         * way of trying to unparkSuccessor of head if it needs
         * signal. But if it does not, status is set to PROPAGATE to
         * ensure that upon release, propagation continues.
         * Additionally, we must loop in case a new node is added
         * while we are doing this. Also, unlike other uses of
         * unparkSuccessor, we need to know if CAS to reset status
         * fails, if so rechecking.
         */
        for (;;) {
            Node h = head;
            // 如果队列不为空
            if (h != null && h != tail) {  （1）
                int ws = h.waitStatus;
                if (ws == Node.SIGNAL) {
                // 如果h.waitStatus=-1，则设置成0，返回true
                    if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))
                        continue;            // loop to recheck cases
                        // 设置头节点的ws=0成功之后，释放头结点的下一个线程节点
                        // 下一个节点竞争锁成功之后，会调用setHead(node)方法，更改头节点
                        // 考虑两种情况：1、头节点没有被更改；2、头节点被更改了。
                    unparkSuccessor(h);
                }
                else if (ws == 0 &&
                // 如果ws==0,则设置成-3，表示下一个传输进行来共享模式的线程节点无条件传递
                         !compareAndSetWaitStatus(h, 0, Node.PROPAGATE)) // 1、当头节点没有被改变的时候，运行到这里，更改ws的值，然后直接退出
                                                                                                                            // 2、如果头节点被改变，那么循环（1）还要再走一次，然后退出
                    continue;                // loop on failed CAS
            }
            // 更改成功之后，跳出死循环
            if (h == head)                   // loop if head changed
                break;
        }
    }


    ///-----释放锁，返回true,说明释放一把读锁成功----------
    protected final boolean tryReleaseShared(int unused) {
                Thread current = Thread.currentThread();
                if (firstReader == current) {
                    // assert firstReaderHoldCount > 0;
                    if (firstReaderHoldCount == 1)
                        firstReader = null;
                    else
                        firstReaderHoldCount--;
                } else {
                    HoldCounter rh = cachedHoldCounter;
                    if (rh == null || rh.tid != getThreadId(current))
                        rh = readHolds.get();
                    int count = rh.count;
                    // count <= 1，说明当前的线程没有重入
                    if (count <= 1) {
                    // 没有重入就将当前线程从readHolds中移除
                        readHolds.remove();
                        if (count <= 0)
                            throw unmatchedUnlockException();
                    }
                    --rh.count;
                }
                for (;;) {
                    int c = getState();
                    // 减去一个读锁，剩下的读锁
                    int nextc = c - SHARED_UNIT;
                    // compareAndSetState(c, nextc)
                    if (compareAndSetState(c, nextc))
                        // Releasing the read lock has no effect on readers,
                        // but it may allow waiting writers to proceed if
                        // both read and write locks are now free.
                        // 一直到把所有的读锁(不包括加入到队列中的读锁)全部都释放完了
                        // 然后执行doReleaseShared()方法，把锁传递给队列中等待的线程节点
                        return nextc == 0;
                }
            }


            ///

                protected final boolean tryAcquire(int acquires) {
                        /*
                         * Walkthrough:
                         * 1. If read count nonzero or write count nonzero
                         *    and owner is a different thread, fail.
                         * 2. If count would saturate, fail. (This can only
                         *    happen if count is already nonzero.)
                         * 3. Otherwise, this thread is eligible for lock if
                         *    it is either a reentrant acquire or
                         *    queue policy allows it. If so, update state
                         *    and set owner.
                         */
                        Thread current = Thread.currentThread();
                        int c = getState();
                        int w = exclusiveCount(c);
                        if (c != 0) {
                            // (Note: if c != 0 and w == 0 then shared count != 0)
                            if (w == 0 || current != getExclusiveOwnerThread())
                                return false;
                            if (w + exclusiveCount(acquires) > MAX_COUNT)
                                throw new Error("Maximum lock count exceeded");
                            // Reentrant acquire
                            setState(c + acquires);
                            return true;
                        }
                        if (writerShouldBlock() ||
                            !compareAndSetState(c, c + acquires)) // 当前面的读锁全部被释放之后，会通知后续节点运行，然后此时有读锁进来，在这里读写开始竞争锁了
                            return false;
                        setExclusiveOwnerThread(current);
                        return true;
                    }

// ---------WirterLock源码分析-------------


  protected final boolean tryAcquire(int acquires) {
            /*
             * Walkthrough:
             * 1. If read count nonzero or write count nonzero
             *    and owner is a different thread, fail.
             * 2. If count would saturate, fail. (This can only
             *    happen if count is already nonzero.)
             * 3. Otherwise, this thread is eligible for lock if
             *    it is either a reentrant acquire or
             *    queue policy allows it. If so, update state
             *    and set owner.
             */
            Thread current = Thread.currentThread();
            int c = getState();
            int w = exclusiveCount(c);
            if (c != 0) { // 说明锁被占领了,并且不是被自己占领的（不是重入），则返回false
                // (Note: if c != 0 and w == 0 then shared count != 0)
                if (w == 0 || current != getExclusiveOwnerThread())
                    return false;
                    // 如果是被自己占领，请没有超过最大重入次数，那么返回true
                if (w + exclusiveCount(acquires) > MAX_COUNT)
                    throw new Error("Maximum lock count exceeded");
                // Reentrant acquire
                setState(c + acquires);
                return true;
            }
            // 如果队列中存在其他竞争的线程，writerShouldBlock()返回true，那么直接方法返回flase
            // 如果队列中不存在其他线程，writerShouldBlock()返回false，当前线程进入竞争状态，竞争成功，返回true，否则返回false
            if (writerShouldBlock() ||
                !compareAndSetState(c, c + acquires))
                return false;
            setExclusiveOwnerThread(current);
            return true;
        }

        //--writerShouldBlock()
        对于非公平锁直接返回false,对于公平锁，则执行下面的方法
         public final boolean hasQueuedPredecessors() {
                // The correctness of this depends on head being initialized
                // before tail and on head.next being accurate if the current
                // thread is first in queue.
                Node t = tail; // Read fields in reverse initialization order
                Node h = head;
                Node s;
                // 队列中有节点，并且非当前的线程，返回true
                return h != t &&
                    ((s = h.next) == null || s.thread != Thread.currentThread());
            }




























