       public void lock() {
            sync.acquire(1);
        }

          public final void acquire(int arg) {
          //  获取锁成功之后，tryAcquire(arg)=true，那么！tryAcquire(arg) =false,直接返回
          // 否则需要将线程对象加入到等待队列中
                if (!tryAcquire(arg) &&
                    acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) // 这里加入到等待队列中跟ReentrantLock是一样的
                    selfInterrupt();
            }

// 这个是写锁的获取
         protected final boolean tryAcquire(int acquires) {

                    Thread current = Thread.currentThread();
                    // 获取到锁的状态，高16位是读，低16位是写
                    int c = getState();
                    // 获取到写锁的个数
                    int w = exclusiveCount(c);
                    if (c != 0) {
                    // 进到这里，表示前面没有获取写锁的线程
                        // (Note: if c != 0 and w == 0 then shared count != 0)
                        if (w == 0 || current != getExclusiveOwnerThread())
                            return false;
                        if (w + exclusiveCount(acquires) > MAX_COUNT)
                            throw new Error("Maximum lock count exceeded");
                        // Reentrant acquire
                        // state +1
                        setState(c + acquires);
                        return true;
                    }
                    // 走到这里，说明当前锁没有被任何的线程拿到
                    // 判断写锁是否应该被阻塞，如果等待队列中没有等待的节点，则返回false,那么通过cas来竞争锁
                    // 如果等待队列中的头结点的下一个节点不是当前线程，则返回true
                    if (writerShouldBlock() ||
                        !compareAndSetState(c, c + acquires)) // 如果竞争成功，则返回true,但是！true则为false
                        return false;
                        // 设置当前的运行的排他线程为当前线程
                    setExclusiveOwnerThread(current);
                    return true;
                }

// writerShouldBlock()
 在NonfairSync类中的定义，写锁应该被阻塞
  final boolean writerShouldBlock() {
             return false; // writers can always barge
         }
 在FairSync类中的定义
      final boolean writerShouldBlock() {
             return hasQueuedPredecessors();
         }
  / *
     * @return {@code true} if there is a queued thread preceding the
     *         current thread, and {@code false} if the current thread
     *         is at the head of the queue or the queue is empty
     * @since 1.7
     */
           public final boolean hasQueuedPredecessors() {
                 // The correctness of this depends on head being initialized
                 // before tail and on head.next being accurate if the current
                 // thread is first in queue.
                 Node t = tail; // Read fields in reverse initialization order
                 Node h = head;
                 Node s;
                 // h!=t，头尾不是一个，返回true
                 // h!=t,且h.next==null说明没有等待的线程，返回true
                 //h!=t,且h.next!=null说明有等待的线程， s.thread != Thread.currentThread()，说明在当前线程之前还有一个线程节点在等待
                 return h != t &&
                     ((s = h.next) == null || s.thread != Thread.currentThread());
             }

 /**
     * Acquires in exclusive timed mode.
     *
     * @param arg the acquire argument
     * @param nanosTimeout max wait time
     * @return {@code true} if acquired
     */
    private boolean doAcquireNanos(int arg, long nanosTimeout)
            throws InterruptedException {
        if (nanosTimeout <= 0L)
            return false;
            // 设置最后的期限
        final long deadline = System.nanoTime() + nanosTimeout;
        final Node node = addWaiter(Node.EXCLUSIVE);
        boolean failed = true;
        try {
            for (;;) {
                final Node p = node.predecessor();
                if (p == head && tryAcquire(arg)) {
                    setHead(node);
                    p.next = null; // help GC
                    failed = false;
                    return true;
                }
                nanosTimeout = deadline - System.nanoTime();
                // 说明已经超过期限了
                if (nanosTimeout <= 0L)
                    return false;
                    // 如果nanosTimeout >0L，说明没有到达期限
                if (shouldParkAfterFailedAcquire(p, node) &&
                    nanosTimeout > spinForTimeoutThreshold)
                    LockSupport.parkNanos(this, nanosTimeout);
                if (Thread.interrupted())
                    throw new InterruptedException();
            }
        } finally {
            if (failed)
                cancelAcquire(node);
        }
    }

    // readerShouldBlock
    在NonfairSync中
      final boolean readerShouldBlock() {
                /* As a heuristic to avoid indefinite writer starvation,
                 * block if the thread that momentarily appears to be head
                 * of queue, if one exists, is a waiting writer.  This is
                 * only a probabilistic effect since a new reader will not
                 * block if there is a waiting writer behind other enabled
                 * readers that have not yet drained from the queue.
                 */
                return apparentlyFirstQueuedIsExclusive();
            }

               /**
                 * Returns {@code true} if the apparent first queued thread, if one
                 * exists, is waiting in exclusive mode.  If this method returns
                 * {@code true}, and the current thread is attempting to acquire in
                 * shared mode (that is, this method is invoked from {@link
                 * #tryAcquireShared}) then it is guaranteed that the current thread
                 * is not the first queued thread.  Used only as a heuristic in
                 * ReentrantReadWriteLock.
                 */
                final boolean apparentlyFirstQueuedIsExclusive() {
                    Node h, s;
                    // (h = head) != null，头节点不是空
                    // (s = h.next)  != null，下一个节点不是空
                    //   !s.isShared() ,下一个节点线程工作再排他模式上
                    // s.thread !=null，线程不是空
                    return (h = head) != null &&
                        (s = h.next)  != null &&
                        !s.isShared()         &&
                        s.thread != null;
                }

   //      在FairSync中

                  final boolean readerShouldBlock() {
                            return hasQueuedPredecessors();
                        }
